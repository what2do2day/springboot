name: Build, Push and Deploy with ConfigMap

on:
  workflow_dispatch:
    inputs:
      service:
        description: '배포할 서비스 이름'
        required: true
        default: 'gateway-service'
      image_tag:
        description: '도커 이미지 태그 (옵션, 기본 "latest")'
        required: false
        default: 'latest'

  push:
    branches:
      - main
      - 'deploy/#16'

env:
  AWS_REGION: ap-northeast-2
  ECR_ACCOUNT_URL: 624227064848.dkr.ecr.ap-northeast-2.amazonaws.com
  EKS_CLUSTER_NAME: hilarious-jazz-outfit

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check AWS credentials
        run: aws sts get-caller-identity

      - name: Configure kubectl
        run: aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Show kubeconfig
        run: cat ~/.kube/config

      - name: kubectl config view
        run: kubectl config view

      - name: Test kubectl connectivity
        run: kubectl get nodes --request-timeout=10s

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine service and image tag
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            SERVICE="${{ github.event.inputs.service || 'gateway-service' }}"
            IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          else
            SERVICE="${{ github.event.inputs.service }}"
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          fi
          echo "SERVICE=$SERVICE" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build JAR if Java service
        if: env.SERVICE == 'gateway-service' || env.SERVICE == 'question-answer-service' || env.SERVICE == 'schedule-meeting-service' || env.SERVICE == 'user-couple-service'
        run: ./gradlew clean build -x test -p $SERVICE

      - name: Build & Push Docker Image
        run: |
          docker build -t $ECR_ACCOUNT_URL/$SERVICE:$IMAGE_TAG ./$SERVICE
          docker push $ECR_ACCOUNT_URL/$SERVICE:$IMAGE_TAG

      - name: Create application.yml from secret
        run: |
          if [ "$SERVICE" = "gateway-service" ]; then
            echo "${{ secrets.APP_CONFIG_GATEWAY_SERVICE }}" > application.yml
          elif [ "$SERVICE" = "question-answer-service" ]; then
            echo "${{ secrets.APP_CONFIG_QUESTION_ANSWER_SERVICE }}" > application.yml
          elif [ "$SERVICE" = "schedule-meeting-service" ]; then
            echo "${{ secrets.APP_CONFIG_SCHEDULE_MEETING_SERVICE }}" > application.yml
          elif [ "$SERVICE" = "user-couple-service" ]; then
            echo "${{ secrets.APP_CONFIG_USER_COUPLE_SERVICE }}" > application.yml
          else
            echo "No secret found for $SERVICE"
            exit 1
          fi

      - name: Apply ConfigMap with application.yml
        run: |
          kubectl create configmap $SERVICE-config --from-file=application.yml --dry-run=client -o yaml | kubectl apply --validate=false -f -

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/$SERVICE $SERVICE=$ECR_ACCOUNT_URL/$SERVICE:$IMAGE_TAG
          kubectl rollout status deployment/$SERVICE
